package me.example;

import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.JDABuilder;
import net.dv8tion.jda.api.entities.Message;
import net.dv8tion.jda.api.entities.channel.middleman.MessageChannel;
import net.dv8tion.jda.api.exceptions.ErrorResponseException;
import net.dv8tion.jda.api.requests.GatewayIntent;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.time.LocalTime;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

public class DiscordStatPlugin extends JavaPlugin {

    private JDA jda;
    private long channelId;
    private String messageId; // ID —Ç–æ–≥–æ —Å–∞–º–æ–≥–æ Discord-—Å–æ–æ–±—â–µ–Ω–∏—è
    private String serverDomain;
    private int serverPort;

    @Override
    public void onEnable() {
        // –°–æ–∑–¥–∞—ë—Ç config.yml, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        saveDefaultConfig();

        // –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        String botToken = getConfig().getString("bot-token", "");
        channelId = getConfig().getLong("channel-id", 0L);
        serverDomain = getConfig().getString("server-domen", "f1.rustix.me");
        serverPort = getConfig().getInt("server-port", 28146);

        if (botToken.isEmpty() || channelId == 0) {
            getLogger().severe("–ù–µ —É–∫–∞–∑–∞–Ω bot-token –∏–ª–∏ channel-id –≤ config.yml! –û—Ç–∫–ª—é—á–∞—é—Å—å...");
            getServer().getPluginManager().disablePlugin(this);
            return;
        }

        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º Discord-–±–æ—Ç–∞
            jda = JDABuilder.createDefault(botToken)
                    .enableIntents(GatewayIntent.GUILD_MESSAGES, GatewayIntent.DIRECT_MESSAGES)
                    .build();
            jda.awaitReady();

            getLogger().info("Discord –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");

            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ ID
            MessageChannel channel = jda.getTextChannelById(channelId);
            if (channel == null) {
                getLogger().severe("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Discord-–∫–∞–Ω–∞–ª –ø–æ ID " + channelId);
                return;
            }

            // –ò—â–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –Ω–µ—Ç –ª–∏ —Å—Ç–∞—Ä–æ–≥–æ messageId
            messageId = getConfig().getString("discord-message-id", "");
            Message msg = null;
            // –ï—Å–ª–∏ messageId –Ω–µ–ø—É—Å—Ç–æ–π, –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (messageId != null && !messageId.isEmpty()) {
                try {
                    msg = channel.retrieveMessageById(messageId).complete();
                } catch (ErrorResponseException ex) {
                    getLogger().warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ " + messageId + ". –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ.");
                }
            }

            // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä–æ–µ - —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
            if (msg == null) {
                msg = channel.sendMessage("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...").complete();
                messageId = msg.getId();
                getConfig().set("discord-message-id", messageId);
                saveConfig();
            }

            // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –æ–±–Ω–æ–≤–ª—è–µ–º Discord-—Å–æ–æ–±—â–µ–Ω–∏–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            Bukkit.getScheduler().runTaskTimerAsynchronously(this, () -> {
                try {
                    String content = buildStatusMessage();
                    channel.editMessageById(messageId, content).queue();
                } catch (Exception e) {
                    getLogger().warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
                }
            }, 0L, 5 * 20L);

            // –†–∞–∑ –≤ –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
            Bukkit.getScheduler().runTaskTimer(this, this::checkScheduledCommands, 0L, 60 * 20L);

        } catch (Exception e) {
            e.printStackTrace();
            getLogger().severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Discord-–±–æ—Ç–∞: " + e.getMessage());
            // –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –ø–æ–¥–Ω—è–ª—Å—è, –æ—Ç–∫–ª—é—á–∞–µ–º –ø–ª–∞–≥–∏–Ω
            getServer().getPluginManager().disablePlugin(this);
        }
    }

    @Override
    public void onDisable() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ø–ª–∞–≥–∏–Ω–∞
        if (jda != null) {
            jda.shutdownNow();
        }
        getLogger().info("DiscordStatPlugin –æ—Ç–∫–ª—é—á—ë–Ω.");
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Discord-—Å–æ–æ–±—â–µ–Ω–∏—è.
     * - TPS (–æ–±—Ä–µ–∑–∞–µ–º –º–∞–∫—Å –¥–æ 20.0)
     * - –û–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω (—É—Å–ª–æ–≤–Ω–æ –æ–Ω–ª–∞–π–Ω)
     * - –ö–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤
     * - –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ (–ø–∏–Ω–≥)
     */
    private String buildStatusMessage() {
        double rawTps = getServerTPS();   // –ø–æ–ª—É—á–∏–º TPS —á–µ—Ä–µ–∑ reflection
        double tps = Math.min(rawTps, 20.0); // —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ 23
        String tpsStr = String.format("%.2f", tps);

        boolean online = true; // –†–∞–∑ –ø–ª–∞–≥–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç - —Å–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω
        int onlineCount = Bukkit.getOnlinePlayers().size();
        int maxPlayers = Bukkit.getMaxPlayers();

        StringBuilder sb = new StringBuilder();
        sb.append("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞**\n");
        sb.append("**TPS**: ").append(tpsStr).append("\n");
        sb.append("**–°—Ç–∞—Ç—É—Å**: ").append(online ? "üü¢ –û–Ω–ª–∞–π–Ω" : "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω").append("\n");
        sb.append("**–ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω**: ").append(onlineCount).append("/").append(maxPlayers).append("\n");

        for (Player p : Bukkit.getOnlinePlayers()) {
            int ping = getPlayerPing(p);
            sb.append(p.getName()).append(" (–ø–∏–Ω–≥: ").append(ping).append("ms)\n");
        }
        sb.append("\n–î–æ–º–µ–Ω: ").append(serverDomain).append(":").append(serverPort);

        return sb.toString();
    }

    /**
     * –ü—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å TPS —á–µ—Ä–µ–∑ reflection –∏–∑ MinecraftServer (Mohist / Spigot).
     * MinecraftServer.recentTps[0].
     */
    private double getServerTPS() {
        try {
            // Bukkit.getServer() -> CraftServer
            Object craftServer = Bukkit.getServer();
            // craftServer.getServer() -> MinecraftServer
            Method getServerMethod = craftServer.getClass().getMethod("getServer");
            Object nmsMinecraftServer = getServerMethod.invoke(craftServer);

            // nmsMinecraftServer.recentTps -> double[]
            Field tpsField = nmsMinecraftServer.getClass().getField("recentTps");
            double[] tpsArr = (double[]) tpsField.get(nmsMinecraftServer);
            return tpsArr[0]; // –æ–±—ã—á–Ω–æ [0] - 1-–º–∏–Ω—É—Ç–Ω—ã–π TPS
        } catch (Exception e) {
            // –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ, –≤–µ—Ä–Ω—ë–º –∑–∞–≥–ª—É—à–∫—É
            return 20.0;
        }
    }

    /**
     * –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—É—Ç—è–º–∏:
     * 1) –ï—Å–ª–∏ —É Player –µ—Å—Ç—å –º–µ—Ç–æ–¥ getPing().
     * 2) –ò–Ω–∞—á–µ –±–µ—Ä—ë–º –ø–æ–ª–µ ping —É EntityPlayer.
     * –ï—Å–ª–∏ –≤—Å—ë –Ω–µ—É–¥–∞—á–Ω–æ - –≤–µ—Ä–Ω—ë–º -1.
     */
    private int getPlayerPing(Player player) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ getPing() —É player
            Method getPingMethod = player.getClass().getMethod("getPing");
            return (int) getPingMethod.invoke(player);
        } catch (Exception e) {
            // –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ - –∏–¥—ë–º –¥–∞–ª—å—à–µ
        }

        // –ü—Ä–æ–±—É–µ–º reflection: player.getHandle().ping
        try {
            Method getHandle = player.getClass().getMethod("getHandle");
            Object entityPlayer = getHandle.invoke(player);

            Field pingField = entityPlayer.getClass().getField("ping");
            return pingField.getInt(entityPlayer);
        } catch (Exception e) {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–ª–µ ping - –≤–µ—Ä–Ω—ë–º -1
            return -1;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É).
     * –í config.yml:
     * scheduled-commands:
     *   - time: "12:00"
     *     command: "say –ü–æ–ª–¥–µ–Ω—å!"
     */
    private void checkScheduledCommands() {
        List<?> scheduled = getConfig().getList("scheduled-commands");
        if (scheduled == null) return;

        // –¢–µ–∫—É—â–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        LocalTime now = LocalTime.now(TimeZone.getDefault().toZoneId());

        for (Object entry : scheduled) {
            if (!(entry instanceof Map)) {
                continue;
            }
            @SuppressWarnings("unchecked")
            Map<String, Object> map = (Map<String, Object>) entry;
            String time = (String) map.get("time");
            String command = (String) map.get("command");
            if (time == null || command == null) {
                continue;
            }

            LocalTime scheduledTime;
            try {
                scheduledTime = LocalTime.parse(time); // —Ñ–æ—Ä–º–∞—Ç "HH:mm"
            } catch (Exception e) {
                continue;
            }

            // –ï—Å–ª–∏ —á–∞—Å—ã/–º–∏–Ω—É—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
            if (now.getHour() == scheduledTime.getHour() && now.getMinute() == scheduledTime.getMinute()) {
                // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–Ω—Å–æ–ª–∏
                Bukkit.dispatchCommand(Bukkit.getConsoleSender(), command);
                getLogger().info("–í—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: " + command);
            }
        }
    }
}
